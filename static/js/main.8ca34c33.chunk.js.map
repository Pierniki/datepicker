{"version":3,"sources":["utility/index.ts","components/ScrollableColumn.tsx","components/DatePicker.tsx","App.tsx","index.tsx"],"names":["getDaysInMonthArr","month","year","daysInMonth","Date","getDate","Array","from","length","_","i","mod","n","m","getValuesToDisplay","valuesArray","currentValue","to","slice","getStyleFromIdx","idx","idxDifference","minHeight","Math","abs","opacity","transform","ScrollableColumn","currentValueIdx","setCurrentValueIdx","className","useState","isScrolling","setIsScrolling","prevMouseY","useRef","containerRef","useEffect","current","scrollTop","onMouseUp","scroll","isScrollingTop","onMove","clientY","ref","onWheel","e","preventDefault","deltaY","onMouseDown","onMouseMove","onTouchMove","touches","onMouseLeave","map","value","style","onClick","displayArray","indexOfValue","indexOf","indexOfCurrentValue","today","months","years","keys","DatePicker","getUTCDate","currentDayIdx","setCurrentDayIdx","getUTCMonth","currentMonthIdx","setCurrentMonthIdx","getUTCFullYear","currentYearIdx","setCurrentYearIdx","console","log","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ca34c33.chunk.js","sourcesContent":["export const getDaysInMonthArr = (month: number, year: number): number[] => {\r\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n  return Array.from(Array.from({ length: daysInMonth }, (_, i) => i + 1));\r\n};\r\n\r\nexport const mod = (n: number, m: number): number => {\r\n  return ((n % m) + m) % m;\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { mod } from '../utility';\r\n\r\nconst getValuesToDisplay = (\r\n  valuesArray: number[] | string[],\r\n  currentValue: number\r\n) => {\r\n  const step = 3;\r\n  const from = mod(currentValue - step, valuesArray.length);\r\n  const to = mod(currentValue + step, valuesArray.length);\r\n  if (to > from) return valuesArray.slice(from, to + 1);\r\n  return [...valuesArray.slice(from), ...valuesArray.slice(0, to + 1)];\r\n};\r\n\r\nconst getStyleFromIdx = (idx: number): React.CSSProperties => {\r\n  const centerIdx = 3;\r\n  const idxDifference = centerIdx - idx;\r\n  const heightDecrease = 10;\r\n  const opacityDecrease = 0.44;\r\n  const degreeDecrease = 20;\r\n\r\n  return {\r\n    minHeight: 50 - Math.abs(idxDifference) * heightDecrease,\r\n    opacity: 1 - Math.abs(idxDifference) * opacityDecrease,\r\n    transform: `rotateX(${idxDifference * degreeDecrease}deg)`,\r\n  };\r\n};\r\n\r\ninterface IScrolalbleColumnProps {\r\n  currentValueIdx: number;\r\n  setCurrentValueIdx: React.Dispatch<React.SetStateAction<number>>;\r\n  valuesArray: number[] | string[];\r\n  className?: string;\r\n}\r\n\r\nconst ScrollableColumn: React.FC<IScrolalbleColumnProps> = ({\r\n  currentValueIdx,\r\n  setCurrentValueIdx,\r\n  valuesArray,\r\n  className,\r\n}) => {\r\n  const [isScrolling, setIsScrolling] = useState<boolean>(false);\r\n  const prevMouseY = useRef<number>(0);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n    containerRef.current.scrollTop = 50;\r\n  }, []);\r\n\r\n  const onMouseUp = () => {\r\n    setIsScrolling(false);\r\n  };\r\n\r\n  const onMouseDown = () => {\r\n    setIsScrolling(true);\r\n  };\r\n\r\n  const scroll = (isScrollingTop: boolean) => {\r\n    const length = valuesArray.length;\r\n    const valueToAdd = isScrollingTop ? 1 : -1;\r\n    setCurrentValueIdx(mod(currentValueIdx + valueToAdd, length));\r\n  };\r\n\r\n  const onMove = (clientY: number) => {\r\n    if (Math.abs(prevMouseY.current - clientY) < 25) return;\r\n    scroll(prevMouseY.current > clientY);\r\n    prevMouseY.current = clientY;\r\n  };\r\n\r\n  const onMouseMove = ({\r\n    clientY,\r\n  }: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (isScrolling) onMove(clientY);\r\n  };\r\n\r\n  const onTouchMove = ({ touches }: React.TouchEvent<HTMLDivElement>) => {\r\n    if (touches) onMove(touches[0].clientY);\r\n  };\r\n\r\n  const onClick = (value: number | string) => {\r\n    if (isScrolling) return;\r\n    const displayArray = getValuesToDisplay(valuesArray, currentValueIdx);\r\n    const indexOfValue = displayArray.indexOf(value);\r\n    const indexOfCurrentValue = displayArray.indexOf(\r\n      valuesArray[currentValueIdx]\r\n    );\r\n    if (indexOfValue === indexOfCurrentValue) return;\r\n    scroll(indexOfValue > indexOfCurrentValue);\r\n  };\r\n\r\n  const onWheel = (e: React.WheelEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    scroll(e.deltaY > 0);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`scroll_column ${className}`}\r\n      onWheel={onWheel}\r\n      onMouseDown={onMouseDown}\r\n      onMouseUp={onMouseUp}\r\n      onMouseMove={onMouseMove}\r\n      onTouchMove={onTouchMove}\r\n      onMouseLeave={onMouseUp}\r\n    >\r\n      {getValuesToDisplay(valuesArray, currentValueIdx).map((value, idx) => (\r\n        <button\r\n          style={getStyleFromIdx(idx)}\r\n          className={`scroll_button`}\r\n          key={`scroll-btn-${idx}-$`}\r\n          onClick={() => onClick(value)}\r\n        >\r\n          {value}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollableColumn;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { getDaysInMonthArr } from '../utility';\r\nimport ScrollableColumn from './ScrollableColumn';\r\n\r\nconst today = new Date();\r\n\r\nconst months = [\r\n  'Jan',\r\n  'Feb',\r\n  'Mar',\r\n  'Apr',\r\n  'May',\r\n  'Jun',\r\n  'Jul',\r\n  'Aug',\r\n  'Sep',\r\n  'Oct',\r\n  'Nov',\r\n  'Dec',\r\n];\r\nconst years = Array.from(Array(9999).keys());\r\n\r\nconst DatePicker: React.FC = () => {\r\n  const [currentDayIdx, setCurrentDayIdx] = useState<number>(\r\n    today.getUTCDate() - 1\r\n  );\r\n  const [currentMonthIdx, setCurrentMonthIdx] = useState<number>(\r\n    today.getUTCMonth()\r\n  );\r\n  const [currentYearIdx, setCurrentYearIdx] = useState<number>(\r\n    today.getUTCFullYear()\r\n  );\r\n\r\n  console.log(currentDayIdx + 1, currentMonthIdx + 1, currentYearIdx);\r\n\r\n  return (\r\n    <div className=\"scroll_container\">\r\n      <ScrollableColumn\r\n        className=\"days_column\"\r\n        currentValueIdx={currentDayIdx}\r\n        setCurrentValueIdx={setCurrentDayIdx}\r\n        valuesArray={getDaysInMonthArr(currentMonthIdx, currentYearIdx)}\r\n      />\r\n      <ScrollableColumn\r\n        className=\"months_column\"\r\n        currentValueIdx={currentMonthIdx}\r\n        setCurrentValueIdx={setCurrentMonthIdx}\r\n        valuesArray={months}\r\n      />\r\n      <ScrollableColumn\r\n        className=\"years_column\"\r\n        currentValueIdx={currentYearIdx}\r\n        setCurrentValueIdx={setCurrentYearIdx}\r\n        valuesArray={years}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n","import React from 'react';\nimport './App.css';\nimport DatePicker from './components/DatePicker';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h1 className=\"title_primary\">Pick</h1>\n        <h1 className=\"title_secondary\">a Date</h1>\n      </div>\n      <DatePicker />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}